
-- Load Rayfield and create the window
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
})

local Tab = Window:CreateTab("Tab Example", 4483362458) -- Title, Image
local Section = Tab:CreateSection("Section Example")

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

local username = Players.LocalPlayer.Name



local function sendWebhookMessage(description, itemsFound)
    local embedMessage = {
        title = "**Leaf Hub**",
        color = tonumber(0xFF0000), -- Red color
        description = description,
        fields = {
            {
                name = "**Username:**",
                value = username
            }
        }
    }

    if itemsFound and #itemsFound > 0 then
        embedMessage.description = embedMessage.description .. "\n**ItemsFound:** " .. table.concat(itemsFound, ", ")
    else
        embedMessage.description = embedMessage.description .. "\n**ItemsFound:** None"
    end

    local response = syn.request({
        Url = _G.Webhook_Url,
        Method = 'POST',
        Headers = {
            ['Content-Type'] = 'application/json'
        },
        Body = HttpService:JSONEncode({
            embeds = {embedMessage}
        })
    })

    print("Webhook Status Code:", response.StatusCode)
    print("Webhook Response Body:", response.Body)
end

local function getLowestPlayerServer()
    local servers = TeleportService:GetLocalPlayerTeleportQueue()
    local lowestServer = nil
    local lowestPlayerCount = math.huge

    for _, server in ipairs(servers) do
        if server.CurrentPlayers < lowestPlayerCount then
            lowestPlayerCount = server.CurrentPlayers
            lowestServer = server
        end
    end

    return lowestServer
end

local function autoFruitServerHop()
    local visible = false

    -- Send webhook message with the teleport results
    sendWebhookMessage("**Status:** Serverhopping")

    -- Fetch lowest player count server
    local lowestServer = getLowestPlayerServer()
    if lowestServer then
        TeleportService:TeleportToPlaceInstance(lowestServer.PlaceId, lowestServer.GameId)
        print("Teleported to server with lowest player count.")
    else
        print("No servers found to teleport.")
    end

    -- Toggle visibility of username
    visible = not visible
    if visible then
        sendWebhookMessage("**Username hidden**")
    else
        sendWebhookMessage("**Username:** " .. username)
    end
end

if _G.Auto_Serverhop then
    autoFruitServerHop()
else
    local Toggle = Tab:CreateToggle({
        Name = "Auto farm fruit server hop",
        CurrentValue = false,
        Flag = "Toggle1",
        Callback = function(state)
            _G.Auto_Serverhop = state
            if state then
                autoFruitServerHop()
            end
        end
    })
end




Rayfield:LoadConfiguration()
