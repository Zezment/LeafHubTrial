local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/RedzLibV5/main/Source.Lua"))()

local Window = redzlib:MakeWindow({
  Title = "LeafHub : One Fruit Simulator",
  SubTitle = "by LeafHub",
  SaveFolder = "testando | redz lib v5.lua"
})
local Tab1 = Window:MakeTab({"Main", "cherry"})
local Tab2 = Window:MakeTab({"Fruits hopper", "swords"})
local Tab3 = Window:MakeTab({"Auto train stats", "cherry"})
local Tab4 = Window:MakeTab({"Settings", "cherry"})

Tab4:AddButton({"Dark Theme", function()
  redzlib:SetTheme("Dark")
end})

Tab4:AddButton({"Darker Theme", function()
  redzlib:SetTheme("Darker")
end})

Tab4:AddButton({"Dark Purple", function()
  redzlib:SetTheme("Purple")
end})

Window:SelectTab(Tab2)
local Section = Tab2:AddSection({"Section"})

local Number = 0
local Button = Tab2:AddButton({"Button", function()
  Number = Number + 1
  Section:Set("Number : " .. tostring(Number))
  local Dialog = Window:Dialog({
    Title = "Dialog",
    Text = "This is a Dialog",
    Options = {
      {"Confirm", function()
        
      end},
      {"Maybe", function()
        
      end},
      {"Cancel", function()
        
      end}
    }
  })
end})
local HttpService = game:GetService("HttpService")
local username = game.Players.LocalPlayer.Name
local visible = false

local Toggle1 = Tab2:AddToggle({
    Name = "Auto Fruit Server Hop",
    Description = "This is a Toggle Example",
    Default = autoserverhop,
    Callback = function(state)
        if state then
            -- Put your auto fruit server hop code here
           
            -- Function to teleport the player to the position of a specified part
            local function teleportToPart(player, part)
                if player and player.Character and part then
                    player.Character:SetPrimaryPartCFrame(part.CFrame)
                    return true
                end
                return false
            end

            -- Function to find and teleport to all handles
            local function teleportToAllHandles()
                local tools = game.Workspace:GetChildren()
                local teleportedHandles = {} -- Store teleported handles

                for _, tool in ipairs(tools) do
                    if tool:IsA("Tool") then
                        -- Check if the Tool has a Handle which is a MeshPart
                        local handles = tool:GetChildren()
                        for _, handle in ipairs(handles) do
                            if handle.Name == "Handle" and handle:IsA("MeshPart") then
                                -- Teleport the player to the Handle
                                local player = game.Players.LocalPlayer
                                if teleportToPart(player, handle) then
                                    table.insert(teleportedHandles, "**" .. handle.Parent.Name .. "**") -- Store handle parent name
                                    print("Teleported to handle:", handle:GetFullName())
                                    wait(1) -- Wait for 1 second before executing next code
                                    -- Execute code to interact with the fruit
                                    function getNil(name, class, workspaceRef)
                                        local toolName = type(name) == "table" and workspaceRef[name[1]][name[2]][name[3]].Name or name
                                        for _, v in ipairs(workspaceRef:GetChildren()) do
                                            if v.ClassName == class and v.Name == toolName then
                                                return v
                                            end
                                        end
                                    end
                                    local workspaceRef = game.Workspace:WaitForChild("__GAME"):WaitForChild("__Players"):WaitForChild("Jukiye2uwu6") -- Assuming __GAME and __Players are objects
                                    local toolName = workspaceRef:FindFirstChildOfClass("Tool").Name
                                    local args = {
                                        [1] = {
                                            [1] = {
                                                [1] = "\4",
                                                [2] = "EatFruit",
                                                [3] = getNil(toolName, "Tool", workspaceRef),
                                                [4] = "Storage"
                                            }
                                        }
                                    }
                                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                                    wait(2) -- Wait for 2 seconds before teleporting to the next fruit
                                else
                                    warn("Failed to teleport player to Handle:", handle:GetFullName())
                                end
                            end
                        end
                    end
                end

                return teleportedHandles
            end

            -- Teleport to all handles and store teleported handles
            local teleportedHandles = teleportToAllHandles()

            -- Construct embed message
            local embedMessage = {
                title = "**Leaf Hub**",
                color = tonumber(0xFF0000), -- Red color
                description = "",
                fields = {
                    {
                        name = "**Username:**",
                        value = username
                    }
                }
            }

            -- Check if handles were found
            if #teleportedHandles > 0 then
                embedMessage.description = "**Status:** Serverhopping\n**FruitsFound:** " .. table.concat(teleportedHandles, ", ")
            else
                embedMessage.description = "**Status:** Serverhopping\n**FruitsFound:** None"
            end

            -- Send embed message via webhook
            local response = syn.request({
                Url = WebhookUrl,
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = HttpService:JSONEncode({
                    embeds = {embedMessage}
                })
            })

            print("Webhook Status Code:", response.StatusCode)
            print("Webhook Response Body:", response.Body)

            -- Server hop after waiting 10 seconds
            wait(10)
            local success, errorMessage = pcall(function()
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
            end)

            if success then
                print("Server hop successful.")
            else
                print("Error while attempting to server hop:", errorMessage)
            end

            -- Toggle visibility of username
            visible = not visible
            if visible then
                embedMessage.fields[1].value = nil
            else
                embedMessage.fields[1].value = username
            end

            -- Send updated message via webhook
            local updatedResponse = syn.request({
                Url = WebhookUrl,
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = HttpService:JSONEncode({
                    embeds = {embedMessage}
                })
            })

            print("Updated Webhook Status Code:", updatedResponse.StatusCode)
            print("Updated Webhook Response Body:", updatedResponse.Body)
        end
    end
})

local Toggle1 = Tab1:AddToggle({
    Name = "Auto train combat",
    Description = "This is a <font color='rgb(88, 101, 242)'>Toggle</font> Example",
    Default = false,
    Callback = function(enabled)
        while true do
            if enabled then
                -- Check if the Combat tool exists in the backpack
                local combatTool = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Combat")
                if combatTool then
                    -- Equip the Combat tool
                    combatTool.Parent = game:GetService("Players").LocalPlayer.Character
                end

                local args = {
                    [1] = {
                        [1] = {
                            [1] = "\4",
                            [2] = "Combat",
                            [3] = 1,
                            [4] = false,
                            [5] = game:GetService("Players").LocalPlayer.Character.Combat,
                            [6] = "Melee"
                        }
                    }
                }

                game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                wait(0) -- Add a small delay to prevent spamming the server
            else
                break -- Break out of the loop if the toggle is disabled
            end
        end
    end
})





local Button = Tab2:AddButton({
  Name = "Invisible Toggle",
  Description = "Makes the Toggles Invisible"
})

local Toggle1 = Tab1:AddToggle({
  Name = "Auto train",
  Description = "This is a <font color='rgb(88, 101, 242)'>Toggle</font> Example",
  Default = false
})

local Toggle2 = Tab2:AddToggle({
  Name = "Toggle 2",
  Default = true
})

Button:Callback(Toggle1.Visible)
Button:Callback(Toggle2.Visible)

Toggle1:Callback(function(Value)
  Toggle2:Set(false)
end)
Toggle2:Callback(function(Value)
  Toggle1:Set(false)
end)

Tab2:AddSlider({
  Name = "Slider",
  Min = 1,
  Max = 10,
  Increase = 1,
  Default = 5,
  Callback = function(Value)
    
  end
})

-- local Button = Tab2:AddButton({"Refresh Dropdown"})

local Dropdown = Tab1:AddDropdown({
  Name = "Players List",
  Description = "Select the <font color='rgb(88, 101, 242)'>Number</font>",
  Options = {"one", "two", "three"},
  Default = "two",
  Flag = "dropdown teste",
  Callback = function(Value)
    
  end
})
